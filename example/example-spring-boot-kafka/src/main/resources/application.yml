spring:
  kafka:
    bootstrap-servers: localhost:9092
    listener:
      type: batch # 批量消费; default: single
      missing-topics-fatal: false # 缺少 topic 启动是否报错; default: false
    consumer:
      max-poll-records: 50 # 批量最多消费多少条
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      #group-id:
      properties:
        group.id: defaultConsumerGroup # 默认的消费者组
        session.timeout.ms: 120000 # 消费会话超时时间(超过这个时间consumer没有发送心跳,就会触发rebalance操作)
        request.timeout.ms: 180000 # 消费请求超时时间
      enable-auto-commit: true # 自动提交offset
      auto-commit-interval: 1000 # 提交offset延时(接收到消息后多久提交offset)
      # 当kafka中没有初始offset或offset超出范围时将自动重置offset, 有3种策略:
      # earliest:重置为分区中最小的offset;
      # latest:重置为分区中最新的offset(消费分区中新产生的数据);
      # none:只要有一个分区不存在已提交的offset,就抛出异常;
      auto-offset-reset: latest

    producer:
      retries: 0 # 禁止重试, 大于 0 为允许重试
      acks: all # 应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)
      batch-size: 5 # 批量发送
      properties:
        # 提交延时:
        #当生产端积累的消息达到batch-size或接收到消息linger.ms后,生产者就会将消息提交给kafka
        # linger.ms为0表示每接收到一条消息就提交给kafka,这时候batch-size其实就没用了
        linger.ms: 1000
        # 自定义分区器
#        partitioner.class: com.felix.kafka.producer.CustomizePartitioner
      key-serializer: org.apache.kafka.common.serialization.StringDeserializer
      value-serializer: org.apache.kafka.common.serialization.StringDeserializer
      buffer-memory: 33554432 # 生产端缓冲区大小
#      transaction-id-prefix: tx # 非空表示开启事务

raincloud:
  kafka:
    topics:
      - name: topic-hello
logging:
  level:
    io.github.xiaoyureed.raincloud: debug